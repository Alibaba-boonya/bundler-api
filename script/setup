#!/usr/bin/env ruby
# Create and migrate the database specified in the $DATABASE_URL environment
# variable.
#
# Usage: script/rebuild [--verbose] [--rebuild]
#
# Options:
#   --rebuild: drop the database before creating it
#   --verbose: print errors and warnings from postgres

$stdout.sync = true

lib = File.expand_path(File.join('..', '..', 'lib'), __FILE__)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)

require 'bundler/setup'
require 'bundler_api/env'

def rebuild?
  @rebuild ||= ARGV.delete('--rebuild')
end

def verbose?
  @verbose ||= (ARGV.delete('-v') || ARGV.delete('--verbose'))
end

def print_output(output)
  return if !verbose? || output.empty?
  output.lines.each do |line|
    puts "  #{line}"
  end
  puts
end

# must be a valid uri, e.g
#   postgres://user:pass@host:80/path
def database_url
  ENV['DATABASE_URL']
end

def conn_info
  uri = URI.parse database_url
  params = []
  params.concat ["--host", uri.host] if uri.host
  params.concat ["--port", uri.port.to_s] if uri.port
  params.concat ["--username", uri.user] if uri.user
  params.concat ["--password", uri.password] if uri.password
  params
end

def database_name
  File.basename(database_url)
end

abort 'DATABASE_URL environment variable required' unless database_url

if rebuild?
  puts 'Dropping database'
  system *["dropdb", "--if-exists", conn_info, database_name].flatten
end

puts "Creating database: #{database_url}"
system *(p ["createdb", conn_info, database_name].flatten)

puts 'Migrating database'
system *%W{sequel --migrate-directory db/migrations #{database_url}}

puts "
Done! \
Run `rake update` and `rake fix_deps` to populate the database with \
all gems from rubygems.org."
